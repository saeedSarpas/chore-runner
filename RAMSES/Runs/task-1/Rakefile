# -*- coding: utf-8 -*-
# High resolution evaporation of cold clumps
#
#           +=====+==============+
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||  1  |      2       ||
#  ---->   || hot |     cold     ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#           +=====+==============+
#
# M_halo = 10^12 M_sun
# R_halo = 100 kpc
# d_clump = 50 kpc
# k_B = 8.640 * 10^-9 kpc^2 Myr^-2 K^-1 (m_p)
#
# Assumptions:
# - no gravity
# - ideal gas: p = (\rho k_B T) / (\mu m_p)
# - mu_c = mu_h = 1
# - cold clumps are perturbations on top of a hot uniform gas
# - hot and cold gas are in pressure equilibrium
# - T_h = T_vir = (1/3) * (GM / R) * (m_p / k_B) = 1.7 * 10^6 K
# - T_c = 10^4 K
# - f_gas = Omega_b / Omega_m = 0.1856
# - => n_h = (M_h / ((4/3) π R^3)) * (Ω_b/Ω_m) * (1/m_p) = 1.76 * 10^-3 cm^-3
# - => n_c = 0.36 cm^-3
# - => p_h = 2.6 * 10^-5 Myr^-2 kpc^-1 (m_p)
# - => p_c = 3.1 * 10^-5 Myr^-2 kpc^-1 (m_p)
# - Source:
# - - distance = 50 kpc
# - - dN/dt = (1/h) \int_{ν_HI}^{\inf} (L(ν)/ν) dν = 10^57.38 s^-1
# - - L(ν) = L_912 * (ν/ν_912)^α, α = - 1.7 (Lusso et al. 2015)
# - - ν_912 L_912 = 9e39 W => L_912 = 2.74e24 W
# - - dE/dt = (L_912/((α+1) * ν_912^α)) * ν^{α+1} |_νi^νf
# - - for each group: dN/dt = (dE/dt) / (h ν_min)
# - - 13.6 eV = 3.29e15 Hz, 18.85 eV = 4.56e15 Hz
# - - 24.59 eV = 5.95e15 Hz, 35.08 eV = 8.48e15 Hz
# - - 54.42 eV = 1.32e16 Hz, 65.67 eV = 1.59e16 Hz
# - - dN/dt:
# - - - G1: 1.45e57 s^-1
# - - - G2: 6.48e56 s^-1
# - - - G3: 4.62e56 s^-1
# - - Fp = dn/dt = (dN/dt) / (4πd^2):
# - - - G1: 4.84e9 cm^-2 s^-1
# - - - G2: 2.16e9 cm^-2 s^-1
# - - - G3: 1.55e9 cm^-2 s^-1
#
# TODO: Add ramses task file and handle run_parallel from there
#       Generate python file for plotting into plots directory


require './../../../lib/path.rb'
require './../../../lib/fortran_namelist.rb'


namespace 'ramses_rt_task_1' do

  task :run, [:path, :np] do |_, args|
    args.with_defaults(
      # path: '/net/eos/scratch/saeed/Results/RAMSES-RT/task-1',
      path: './',
      np: 36)

    LEN = 1.0 # kpc

    nml = FortranNamelist.new
    nml.add_block('RUN_PARAMS', {
      hydro: '.true.',
      nrestart: '0',
      nremap: '10', # Frequency of load balancing (coarse time step)
      nsubcycle: '10*2',
      verbose: '.false.',
      rt: '.true.'
    })

    nml.add_block('UNIT_PARAMS', {
      units_density: '1.66000d-24', # Protons per cm^3
      units_time: '3.1556926d13', # Myr
      units_length: '3.08568025d21' # kpc
    })

    nml.add_block('INIT_PARAMS', {
      nregion: 2,
      region_type: '2*\'square\'',
      x_center: "#{LEN * 0.1}, #{LEN * 0.6}",
      y_center: "#{LEN / 2}, #{LEN / 2}",
      z_center: "#{LEN / 2}, #{LEN / 2}",
      length_x: "#{LEN * 0.2}, #{LEN * 0.8}",
      length_y: "#{LEN}, #{LEN}",
      length_z: "#{LEN}, #{LEN}",
      exp_region: '10, 10',
      d_region: '0.36, 1.8d-3',
      u_region: '0.0, 0.0',
      v_region: '0.0, 0.0',
      W_region: '0.0, 0.0',
      p_region: '3.1d-5, 3.1d-5',
    })

    nml.add_block('AMR_PARAMS', {
      levelmin: 6,
      levelmax: 6,
      ngridtot: '1000000',
      nexpand: 1,
      boxlen: "#{LEN}"
    })

    nml.add_block('OUTPUT_PARAMS', {
      tout: 0,
      foutput: 1000, # each 500 timesteps
      # delta_tout: 0.1, # 10 Myr
      # tend: 100 # 1 Gyr
      tend: 10
    })


    nml.add_block('HYDRO_PARAMS', {
      gamma: 1.4,
      courant_factor: 0.8,
      scheme: '\'muscl\'',
      slope_type: 1
    })

    nml.add_block('COOLING_PARAMS', {
      cooling: '.true.'
    })

    nml.add_block('REFINE_PARAMS', {
      err_grad_d: '0.3',
      err_grad_p: '0.3'
    })

    nml.add_block('RT_PARAMS', {
      X: '0.75d0',
      Y: '0.25d0',
      rt_output_coolstats: '.true.', # std output thermochemistry statistics
      # Inter-cell flux function, less diffusive/spherically etric than GLF
      # also better at maintaining the directionality of radiation
      hll_evals_file: '\'./hll_evals.list\'',
      rt_courant_factor: '0.8',
      rt_c_fraction: '0.01',
      rt_smooth: '.true.',
      rt_otsa: '.true.', # H/He recombination does not emit ionising radiation
      rt_err_grad_xHII: '0.3',
      rt_err_grad_xHI: '0.3',
      rt_is_outflow_bound: '.true.',
      rt_is_init_xion: '.true.', # Only affects restart simulations
      rt_nsource: 3,
      rt_source_type: '3*\'square\'',
      rt_src_x_center: "3*#{0.05 * LEN}",
      rt_src_y_center: "3*#{0.5 * LEN}",
      rt_src_z_center: "3*#{0.5 * LEN}",
      rt_src_length_x: "3*#{0.1 * LEN}",
      rt_src_length_y: "3*#{LEN}",
      rt_src_length_z: "3*#{LEN}",
      rt_src_group: '1,2,3',
      rt_n_source: '4.84d9,2.16d9,1.55d9', # Photon cm^-2 s^-1
      rt_u_source: '1.,1.,1.',
      rt_v_source: '0.,0.,0.',
      rt_w_source: '0.,0.,0.'
    })

    nml.add_block('RT_GROUPS', {
      groupL0: '13.60,24.59,54.42',
      group_egy: '18.85, 35.08, 65.67',
      groupL1: '24.59,54.42,0.0',
      spec2group: '1, 2, 3'
    })

    nml.add_block('BOUNDARY_PARAMS', {
      nboundary: 6,
      ibound_min: '-1,+1,-1,-1,-1,-1',
      jbound_min: '0, 0,-1,+1,-1,-1',
      kbound_min: '0, 0, 0, 0,-1,+1',
      ibound_max: '-1,+1,+1,+1,+1,+1',
      jbound_max: '0, 0,-1,+1,+1,+1',
      kbound_max: '0, 0, 0, 0,-1,+1',
      bound_type: '2, 2, 0, 0, 0, 0'
    })

    nml.write("#{args.path}/task-1.nml")
    sh "cp ./../hll_evals.list #{args.path}"

    command = "cd #{args.path}"
    command += " && mpirun -np #{args.np} ramses3d ./task-1.nml"
    command += " | tee -a #{args.path}/task-1.log"

    sh command
  end
end
