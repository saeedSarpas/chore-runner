require 'matrix'
require './../Generic_funcs/eagle_api.rb'
require './../Generic_funcs/names.rb'
require "./../Generic_funcs/cosmo.rb"

import './../P2C/Rakefile'
import './../Radamesh/Rakefile'
import './../PlotStART/Rakefile'

namespace "eagle" do

  EAGLE_SNAP_DIR = "/net/theia/scratch/EAGLE_snapshots"
  EAGLE_RESULT_DIR = "/net/theia/scratch/saeed/Results"
  MUSE_pixels_cMpc = 1.58 * (1 + 3) / 1000 # cMpc at z ~ 3

  desc "Downloading Halo catalogue, run it as:" \
       " rake \"eagle:surface_brightness[$EAGLE_PASS]\""
  task :surface_brightness, [:passwd, :simname, :snapnum, :snapdir] do |t,args|
    args.with_defaults(:simname => "RefL0100N1504",
                       :snapnum => "12",
                       :snapdir => "snapshot_012_z003p017")

    dbname = "#{args.simname}_Subhalo"

    keys, halos = EagleAPI.get(dbname, args.snapnum, args.passwd,
                               where = ["SubGroupNumber = 0", "Mass > 1e12"],
                               orderby = "Mass")

    cosmo = Cosmo.new :planck13

    snap_basename = args.snapdir.dup
    snap_basename["snapshot"] = "snap"

    inp = "#{EAGLE_SNAP_DIR}/#{args.simname}/#{args.snapdir}/#{snap_basename}.%d.hdf5"
    first_snap = inp.dup
    first_snap["%d"] = "0"

    output_dir = "#{EAGLE_RESULT_DIR}/#{args.simname}/#{args.snapdir}/surface_brightness"
    sh "mkdir -p #{output_dir}"

    for i in 0..60
      R_cMpc = 4 * halos[i][keys[:HalfMassRad_DM]].to_f / 1000

      xmin = (halos[i][keys[:CentreOfMass_x]].to_f - R_cMpc) * cosmo.hubble
      ymin = (halos[i][keys[:CentreOfMass_y]].to_f - R_cMpc) * cosmo.hubble
      zmin = (halos[i][keys[:CentreOfMass_z]].to_f - R_cMpc) * cosmo.hubble

      xmax = (halos[i][keys[:CentreOfMass_x]].to_f + R_cMpc) * cosmo.hubble
      ymax = (halos[i][keys[:CentreOfMass_y]].to_f + R_cMpc) * cosmo.hubble
      zmax = (halos[i][keys[:CentreOfMass_z]].to_f + R_cMpc) * cosmo.hubble

      cut_le = "#{xmin},#{ymin},#{zmin}"
      cut_re = "#{xmax},#{ymax},#{zmax}"

      redshift = (`python ./read_attrs.py #{first_snap} Header Redshift`).to_f

      pixel_size_cMpc = MUSE_pixels_cMpc / (1 + 3) * (1 + redshift)
      base_grid = 2**(Math.log2(2 * R_cMpc / pixel_size_cMpc).floor + 1)

      npref = 8

      base_path = "#{output_dir}/#{"%03d" % i}-#{"%.2E" % halos[i][keys[:Mass]].to_f}-#{npref}-#{base_grid}"

      output_p2c = chombo_ext base_path

      Rake::Task["p2c:run"].invoke("#{inp}","#{output_p2c}",npref,base_grid,"#{cut_le}","#{cut_re}")
      Rake::Task["p2c:run"].reenable

      boxsize = (`python ./read_attrs.py #{output_p2c} / ComovingBoxSize`).to_f

      output_radamesh = "#{base_path}-#{"%.2E" % boxsize}-radamesh"

      Rake::Task["radamesh:run"].invoke("#{output_p2c}","#{output_radamesh}",boxsize.to_f,redshift.to_f)
      Rake::Task["radamesh:run"].reenable

      output_radamesh = "#{output_dir}/SO.#{File.basename output_radamesh}.ts0000"
      output_sb = "#{base_path}-#{"%.2E" % boxsize}-surface-brightness.fits"

      Rake::Task["plotstart:surface_brightness"].invoke("#{output_radamesh}","#{output_sb}")
      Rake::Task["plotstart:surface_brightness"].reenable
    end
  end
end
