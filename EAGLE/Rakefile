require 'matrix'
require 'parallel'
require './../Generic_funcs/eagle_api.rb'
require './../Generic_funcs/path.rb'
require "./../Generic_funcs/cosmo.rb"

import './../P2C/Rakefile'
import './../Radamesh/Rakefile'
import './../PlotStART/Rakefile'
import './../VisIt/Rakefile'

namespace "eagle" do

  EAGLE_SNAP_DIR = "/net/theia/scratch/EAGLE_snapshots"
  EAGLE_RESULT_DIR = "/net/theia/scratch/saeed/Results"
  MUSE_pixels_cMpc = 1.58 * (1 + 3) / 1000 # cMpc at z ~ 3

  desc "Downloading Halo catalogue, run it as:" \
       " rake \"eagle:surface_brightness[$EAGLE_PASS]\""
  task :surface_brightness, [:passwd, :simname, :snapnum, :snapdir] do |t,args|
    args.with_defaults(:simname => "RefL0100N1504",
                       :snapnum => "12",
                       :snapdir => "snapshot_012_z003p017")

    dbname = "#{args.simname}_Subhalo"

    keys, halos = EagleAPI.get(dbname, args.snapnum, args.passwd,
                               where = ["SubGroupNumber = 0", "Mass > 1e11"],
                               orderby = "Mass")

    cosmo = Cosmo.new :planck13

    snap_basename = args.snapdir.dup
    snap_basename["snapshot"] = "snap"

    inp = "#{EAGLE_SNAP_DIR}/#{args.simname}/#{args.snapdir}/#{snap_basename}.%d.hdf5"
    first_snap = inp.dup
    first_snap["%d"] = "0"

    sb_dir = "#{EAGLE_RESULT_DIR}/#{args.simname}/#{args.snapdir}/raw_data"
    sh "mkdir -p #{sb_dir}"

    plots_dir = "#{EAGLE_RESULT_DIR}/#{args.simname}/#{args.snapdir}/halos"
    sh "mkdir -p #{plots_dir}"

    redshift = (`python ./read_attrs.py #{first_snap} Header Redshift`).to_f

    results = Parallel.each((0..60), in_processes: 12) do |i|
      p i
      R_cMpc = 4 * halos[i][keys[:HalfMassRad_DM]].to_f * (1 + redshift) / 1000

      xmin = (halos[i][keys[:CentreOfMass_x]].to_f - R_cMpc) * cosmo.hubble
      ymin = (halos[i][keys[:CentreOfMass_y]].to_f - R_cMpc) * cosmo.hubble
      zmin = (halos[i][keys[:CentreOfMass_z]].to_f - R_cMpc) * cosmo.hubble

      xmax = (halos[i][keys[:CentreOfMass_x]].to_f + R_cMpc) * cosmo.hubble
      ymax = (halos[i][keys[:CentreOfMass_y]].to_f + R_cMpc) * cosmo.hubble
      zmax = (halos[i][keys[:CentreOfMass_z]].to_f + R_cMpc) * cosmo.hubble

      cut_le = "#{xmin},#{ymin},#{zmin}"
      cut_re = "#{xmax},#{ymax},#{zmax}"

      pixel_size_cMpc = MUSE_pixels_cMpc / (1 + 3) * (1 + redshift)
      grid = 2**(Math.log2(2 * R_cMpc / pixel_size_cMpc).floor + 1)

      npref = 8

      sb_path = "#{sb_dir}/#{"%03d" % i}-#{halos[i][keys[:GalaxyID]]}-" \
                "#{"%.2E" % halos[i][keys[:Mass]].to_f}-#{npref}-#{grid}"

      output_p2c = Path.make_chombo sb_path

      Rake::Task["p2c:run"].invoke(
        "#{inp}", "#{output_p2c}", npref, grid, "#{cut_le}", "#{cut_re}")
      Rake::Task["p2c:run"].reenable

      boxsize = (`python ./read_attrs.py #{output_p2c} / ComovingBoxSize`).to_f

      plots_path = "#{plots_dir}/#{"%03d" % i}-#{halos[i][keys[:GalaxyID]]}-" \
                   "#{"%.2E" % halos[i][keys[:Mass]].to_f}-#{npref}-" \
                   "#{grid}-#{"%.2f" % boxsize}"

      Rake::Task["visit:color_slice"].invoke(
        "#{output_p2c}", "Chombo",
        "density", "1.e-1", "1.e3", "Log",
        "z", 50,
        "#{plots_path}-slice-50-density", 1024, 1024)
      Rake::Task["visit:color_slice"].reenable

      Rake::Task["visit:color_slice"].invoke(
        "#{output_p2c}", "Chombo",
        "temperature", "1.e4", "1.e7", "Log",
        "z", 50,
        "#{plots_path}-slice-50-temperature", 1024, 1024)
      Rake::Task["visit:color_slice"].reenable

      Rake::Task["visit:color_amr_smoothed_projected"].invoke(
        "#{output_p2c}", "Chombo",
        "density", "1.e-1", "1.e3", "Log",
        "z",
        "#{plots_path}-smoothed-projected-density", 1024, 1024)
      Rake::Task["visit:color_amr_smoothed_projected"].reenable

      Rake::Task["visit:color_amr_smoothed_projected"].invoke(
        "#{output_p2c}", "Chombo",
        "temperature", "1.e4", "1.e7", "Log",
        "z",
        "#{plots_path}-smoothed-projected-temperature", 1024, 1024)
      Rake::Task["visit:color_amr_smoothed_projected"].reenable

      output_radamesh = "#{sb_path}-#{"%.2f" % boxsize}-radamesh"

      Rake::Task["radamesh:run"].invoke(
        "#{output_p2c}", "#{output_radamesh}", boxsize, redshift)
      Rake::Task["radamesh:run"].reenable

      so_radamesh = "#{sb_dir}/SO.#{File.basename output_radamesh}.ts0000"
      output_radamesh_final = Path.make_chombo output_radamesh

      sh "mv #{so_radamesh} #{output_radamesh_final}"

      Rake::Task["visit:color_slice"].invoke(
        "#{output_radamesh_final}", "Chombo",
        "f_HI", "1.e-9", "1.0", "Log",
        "z", 50,
        "#{plots_path}-slice-50-f_HI", 1024, 1024)
      Rake::Task["visit:color_slice"].reenable

      Rake::Task["visit:color_amr_smoothed_projected"].invoke(
        "#{output_radamesh_final}", "Chombo",
        "f_HI", "1.e-9", "1.0", "Log",
        "z",
        "#{plots_path}-smoothed-projected-f_HI", 1024, 1024)
      Rake::Task["visit:color_amr_smoothed_projected"].reenable

      output_sb = "#{sb_path}-#{"%.2f" % boxsize}-surface-brightness.fits"

      Rake::Task["plotstart:surface_brightness"].invoke(
        "#{output_radamesh_final}", "#{output_sb}")
      Rake::Task["plotstart:surface_brightness"].reenable

      Rake::Task["visit:fits"].invoke(
        "#{output_sb}",
        "hdu1", "1.e-19", "1.e-15", "Log",
        "#{plots_path}-surface-brightness", 1024, 1024)
      Rake::Task["visit:color_slice"].reenable
    end

    p results
  end
end
