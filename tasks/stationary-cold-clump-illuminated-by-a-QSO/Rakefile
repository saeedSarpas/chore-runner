# -*- coding: utf-8 -*-
# High resolution evaporation of cold clumps
#
#           +=====+==============+
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||  1  |      2       ||
#  ---->   || hot |     cold     ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#  ---->   ||     |              ||
#           +=====+==============+
#
# Assumptions:
# - no gravity
# - ideal gas: p = (\rho k_B T) / (\mu m_p)
# - hot and cold gas are in pressure equilibrium
# - T_h = T_vir = (1/3) * (GM / R) * (m_p / k_B) = 1.737 * 10^6 K
# - T_c = 10^4 K
# - => n_h = (M_h / ((4/3) π R^3)) * (Ω_b/Ω_m) * (1/m_p) = 1.792 * 10^-3 cm^-3 = 2.999 * 10^-27 g cm^-3
# - => n_c = 0.3113 cm^-3 = 5.209 * 10^-25 g cm^-3
# - => p_h = 2.764 * 10^-5 Myr^-2 kpc^-1 (m_p) = 7.104 * 10^-37 cgs
# - => p_c = 2.682 * 10^-5 Myr^-2 kpc^-1 (m_p) = 7.193 * 10^-37 cgs
# - Source:
# - - distance = 50 kpc
# - - dN/dt = (1/h) \int_{ν_HI}^{\inf} (L(ν)/ν) dν = 10^57.38 s^-1
# - - L(ν) = L_912 * (ν/ν_912)^α, α = - 1.7 (Lusso et al. 2015)
# - - ν_912 L_912 = 9e39 W => L_912 = 2.74e24 W
# - - dE/dt = (L_912/((α+1) * ν_912^α)) * ν^{α+1} |_νi^νf
# - - for each group: dN/dt = (dE/dt) / (h ν_min)
# - - 13.6 eV = 3.29e15 Hz, 18.85 eV = 4.56e15 Hz
# - - 24.59 eV = 5.95e15 Hz, 35.08 eV = 8.48e15 Hz
# - - 54.42 eV = 1.32e16 Hz, 65.67 eV = 1.59e16 Hz
# - - dN/dt:
# - - - G1: 1.45e57 s^-1
# - - - G2: 6.48e56 s^-1
# - - - G3: 4.62e56 s^-1
# - - Fp = dn/dt = (dN/dt) / (4πd^2):
# - - - G1: 4.84e9 cm^-2 s^-1 = 4.61e52 kpc^-2 s^-1
# - - - G2: 2.16e9 cm^-2 s^-1 = 2.06e52 kpc^-2 s^-1
# - - - G3: 1.55e9 cm^-2 s^-1 = 1.47e52 kpc^-2 s^-1
#
# TODO: Add ramses task file and handle run_parallel from there
#       Generate python file for plotting into plots directory


require_relative './../../lib/path.rb'
require_relative './../../lib/fortran_namelist.rb'
require_relative './../../lib/radamesh_params.rb'
require_relative './../../lib/adad.rb'
require_relative './../../lib/cosmo.rb'


namespace 'task_1' do

  # Cosmology
  cosmo = Cosmo.new :planck15
  p "Cosmology: #{cosmo.desc}"

  # Halo
  M_halo = Adad.new 3.16e11, :Msun, 1
  R_halo = Adad.new 100.0, :kpc, 1
  p "Halo: M = #{M_halo.v} #{M_halo.u}, R = #{R_halo.v} #{R_halo.u}"

  # Clump
  d_clump = Adad.new 50.0, :kpc, 1
  X_clump = Adad.new 0.75
  Y_clump = Adad.new 0.25
  p "Clump: d = #{d_clump.v} #{d_clump.u}, X = #{X_clump.v}, Y = #{Y_clump.v}"

  # Source
  I_PhRate = Adad.new 2.4e57, :Hz, 1
  L_912 = Adad.new  2.74e24, :W, 1, :Hz, -1 # [Lusso et al. 2015]
  nu_912 = Adad.new 3.287198e15, :Hz, 1
  a = -1.7 # [Lusso et al. 2015]
  p "Source: L: #{I_PhRate.v} #{I_PhRate.u}"
  p "L@912A = #{L_912.v} #{L_912.u}, alpha: #{a} [Lusso et al. 2015]"

  # Geometry
  boxsize = Adad.new 1.0, :kpc, 1
  basegrid = 128

  # Constants
  G = Adad.new 6.674e-11, :m, 3, :kg, -1, :s, -2
  h = Adad.new 6.62607004e-34, :kg, 1, :m, 2, :s, -1
  k_B = Adad.new 1.38064852e-23, :J, 1, :K, -1
  mu = X_clump + (Y_clump * 4)
  m_H = Adad.new 1.67372e-27, :kg, 1
  m_He = Adad.new 6.64648e-27, :kg, 1
  nu_HI = Adad.new 3.288467e15, :Hz, 1
  nu_HeI = Adad.new 5.945839e15, :Hz, 1
  nu_HeII = Adad.new 1.315870e16, :Hz, 1
  p 'Constants:'
  p "- G = #{G.v} #{G.u}"
  p "- h = #{h.v}, #{h.u}"
  p "- k_B = #{k_B.v} #{k_B.u}"
  p "- m_H = #{m_H.v} #{m_H.u}"
  p "- m_He = #{m_He.v} #{m_He.u}"

  # Hot and Cold termo variables
  f_gas = cosmo.Ob / cosmo.Om
  T_H = ((G * M_halo / R_halo) * (mu * m_H / k_B) / 3.0).to(:K, 1)
  T_C = Adad.new 1.0e4, :K, 1
  n_H = (M_halo / (R_halo**3 * (4.0/3) * Math::PI) * f_gas / (mu * m_H)).to(:cm, -3)
  n_C = (T_H / T_C * n_H).to(:cm, -3)
  p_H = (n_H * k_B * T_H / m_H).to(:cm, -3, :kpc, 2, :Myr, -2)
  p_C = (n_C * k_B * T_C / m_H).to(:cm, -3, :kpc, 2, :Myr, -2)
  p 'Hot region:'
  p "- T_H = #{T_H.v} #{T_H.u}"
  p "- n_H = #{n_H.to(:cm, -3).v} #{n_H.u}"
  p "- p_H = #{p_H.v} #{p_H.u}"
  p 'Cold region:'
  p "- T_C = #{T_C.v} #{T_C.u}"
  p "- n_C = #{n_C.to(:cm, -3).v} #{n_C.u}"
  p "- p_C = #{p_C.v} #{p_C.u}"

  MeanBarDen = Adad.new 1.99e-7, :cm, -3

  # Group ionization photon rates
  nu_G1 = Adad.new 4.557912e15, :Hz, 1
  nu_G2 = Adad.new 8.482310e15, :Hz, 1
  nu_G3 = Adad.new 1.587894e16, :Hz, 1

  b0 = L_912 / (nu_912**a * (a+1)) / (d_clump**2 * 4 * Math::PI) * boxsize**2

  dNdt = Array.new 3
  dNdt[0] = b0 * (nu_HeI**(a+1) - nu_HI**(a+1)) / (h * nu_G1)
  dNdt[1] = b0 * (nu_HeII**(a+1) - nu_HeI**(a+1)) / (h * nu_G2)
  dNdt[2] = b0 * (nu_HeII**(a+1) * -1) / (h * nu_G3)
  dNdt.map { |r| r.simplify! }


  task :radamesh, [:path] do |_,args|
    p = RadameshParams.new

    p.set_section(
      :runtime, {
        'ActualRun' => '.true.',
        'VersionID' => "\"RADAMESH-Internal-IC-#{basegrid}-#{"%.3E" % M_halo.v}M_sun\"",
        'Verbosity' => 2,
        'SimulationTime' => 2.0,
        'TimeStepFact' => 0.1,
        'ClumpingFactor' => 1.0,
        'MaxTimeStep' => '0.01 # Myr',
      })

    p.set_section(
      :cosmology, {
        'OmegaBaryonNow' => "#{"%.4E" % cosmo.Ob.v}",
        'OmegaCDMNow' => "#{"%.4E" % cosmo.Ob.v}",
        'OmegaLambdaNow' => "#{"%.4E" % (1.0 - cosmo.Oc.v)}",
        'HubbleConstNow' => "#{"%.4E" % cosmo.H0.v}"
      })

    p.set_section(
      :ic, {
        'DensityInputFile' => "\"./IC.chombo.h5\"",
        'GridDimensions' => "#{basegrid} #{basegrid} 1",
        'MultiUniRegs' => '.true.',
        'NRegs' => 2,
        'RegLE' => '0. 0. 0.  0.2 0. 0.',
        'RegRE' => '0.2 1. 1.  1. 1. 1.',
        'RegDens' => "#{"%.4E" % (n_H.v/MeanBarDen.v)} #{"%.4E" % (n_C.v/MeanBarDen.v)}",
        'RegTemp' => "#{"%.4E" % T_H.v} #{"%.4E" % T_C.v} # #{T_H.u} #{T_C.u}",
        'RegNtrFrac' => "0. 1.",
        'ComovingBoxSize' => "#{"%.4E" % boxsize.to(:Mpc, 1).v} # Mpc",
        'InitialRedshift' => '0.0',
        'ActiveReg' => '.true.',
        'ActiveRegX' => "1 #{basegrid}",
        'ActiveRegY' => "#{basegrid / 2} #{basegrid / 2}",
        'ActiveRegZ' => "1 1",
      })

    p.set_section(
      :sources, {
        'NSources' => 1,
        'SourceCoords' => '-50.0 0.500001 0.0',
        'SpectrumType' => '1 # Power law',
        'TotalIonRate' =>  "#{"%.4E" % Math::log10(I_PhRate.v)}",
        'SpectrumSlope' => a,
        'OpAngle' => 0.0,
        'LightSpeedLimit' => '.false.',
        'InitHIIradius' => '52.0 # MaxDist',
      })

    p.set_section(
      :init_evol, {
        'DoInitEvol' => '.true.',
        'InitCollEq' => '.true.',
      })

    p.set_section(
      :background, {
        'InitUVBEq' => '.false.',
        'UVB_SS' => '.false.',
        'KeepBKG' => '.false.',
      })

    p.set_section(
      :species, {
        'NSpecies' => 3,
      })

    p.set_section(
      :ray_tracing, {
        'NSpectralRegions' => 3,
        'NSpectralBins' => '6 5 4',
        'MinMaxEnergy' => '1 1.8088 1.8088 4 4 8',
        'NRays' => 5,
        'MaxTau' => '50 50 50',
      })

    p.set_section(
      :output, {
        'NOutputs' => 2000,
        'NTimeSteps' => 2000,
        'OutputFreqStep' => 10,
      })

    p.write(args.path)

    sh "${EDITOR} #{args.path}"
  end


  task :run, [:path, :np] do |_, args|
    args.with_defaults(
      path: '/net/eos/scratch/saeed/Results/task-1/RAMSES-RT',
      np: 36)

    # nml = FortranNamelist.new
    # nml.add_block('RUN_PARAMS', {
    #   cosmo: '.false.',
    #   hydro: '.true.',
    #   nrestart: '0',
    #   nremap: '10', # Frequency of load balancing (coarse time step)
    #   nsubcycle: '10*2',
    #   verbose: '.false.',
    #   rt: '.true.'
    # })

    # nml.add_block('UNIT_PARAMS', {
    #   units_density: '1.66000d-24', # Protons per cm^3
    #   units_time: '3.1556926d13', # Myr
    #   units_length: '3.08568025d21' # kpc
    # })

    # LEN = 1.0 # kpc NOTE: float
    # nml.add_block('INIT_PARAMS', {
    #   nregion: 2,
    #   region_type: '2*\'square\'',
    #   x_center: "#{LEN * 0.1}, #{LEN * 0.6}",
    #   y_center: "#{LEN / 2}, #{LEN / 2}",
    #   z_center: "#{LEN / 2}, #{LEN / 2}",
    #   length_x: "#{LEN * 0.2}, #{LEN * 0.8}",
    #   length_y: "#{LEN}, #{LEN}",
    #   length_z: "#{LEN}, #{LEN}",
    #   exp_region: '10, 10',
    #   d_region: '0.001792, 0.3113',
    #   u_region: '0.0, 0.0',
    #   v_region: '0.0, 0.0',
    #   W_region: '0.0, 0.0',
    #   p_region: '2.682d-5, 2.682d-5',
    # })

    # nml.add_block('AMR_PARAMS', {
    #   levelmin: 7,
    #   levelmax: 7,
    #   ngridtot: '1000000',
    #   nexpand: 1,
    #   boxlen: "#{LEN}"
    # })

    # nml.add_block('OUTPUT_PARAMS', {
    #   tout: 0,
    #   foutput: 1000, # each 500 timesteps
    #   tend: '2' # Myr
    # })


    # nml.add_block('HYDRO_PARAMS', {
    #   gamma: 1.4,
    #   courant_factor: 0.8,
    #   scheme: '\'muscl\'',
    #   slope_type: 1
    # })

    # nml.add_block('COOLING_PARAMS', {
    #   cooling: '.true.'
    # })

    # nml.add_block('RT_PARAMS', {
    #   X: '0.75d0',
    #   Y: '0.25d0',
    #   rt_output_coolstats: '.true.', # std output thermochemistry statistics
    #   # Inter-cell flux function, less diffusive/spherically etric than GLF
    #   # also better at maintaining the directionality of radiation
    #   hll_evals_file: '\'./hll_evals.list\'',
    #   rt_courant_factor: '0.8',
    #   rt_c_fraction: '0.01',
    #   rt_smooth: '.true.',
    #   rt_otsa: '.true.', # H/He recombination does not emit ionising radiation
    #   rt_is_outflow_bound: '.true.',
    #   rt_is_init_xion: '.true.', # Only affects restart simulations
    #   rt_nsource: 3,
    #   rt_source_type: '3*\'square\'',
    #   rt_src_x_center: "3*#{0.005 * LEN}",
    #   rt_src_y_center: "3*#{0.5 * LEN}",
    #   rt_src_z_center: "3*#{0.5 * LEN}",
    #   rt_src_length_x: "3*#{0.01 * LEN}",
    #   rt_src_length_y: "3*#{LEN}",
    #   rt_src_length_z: "3*#{LEN}",
    #   rt_src_group: '1,2,3',
    #   rt_n_source: '4.61e52,2.06e52,1.47e52', # Photon per second
    #   rt_u_source: '1.,1.,1.',
    #   rt_v_source: '0.,0.,0.',
    #   rt_w_source: '0.,0.,0.'
    # })

    # nml.add_block('RT_GROUPS', {
    #   groupL0: '13.60,24.59,54.42',
    #   group_egy: '18.85, 35.08, 65.67',
    #   groupL1: '24.59,54.42,0.0',
    #   spec2group: '1, 2, 3'
    # })

    # nml.add_block('BOUNDARY_PARAMS', {
    #   nboundary: 6,
    #   ibound_min: '-1,+1,-1,-1,-1,-1',
    #   jbound_min: '0, 0,-1,+1,-1,-1',
    #   kbound_min: '0, 0, 0, 0,-1,+1',
    #   ibound_max: '-1,+1,+1,+1,+1,+1',
    #   jbound_max: '0, 0,-1,+1,+1,+1',
    #   kbound_max: '0, 0, 0, 0,-1,+1',
    #   bound_type: '2, 2, 0, 0, 0, 0'
    # })

    # nml.write("#{args.path}/task-1.nml")
    # sh "cp ./../hll_evals.list #{args.path}"

    # sh "$EDITOR #{args.path}/task-1.nml"

    # sh "mkdir -p #{args.path}/plots && cp ./plot.py #{args.path}/plots/"

    # command = "cd #{args.path}"
    # command += " && mpirun -np #{args.np} ramses3d ./task-1.nml"
    # command += " | tee -a #{args.path}/task-1.log"

    # sh command
  end
end
